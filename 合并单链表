/**
     * 合并两个链表
     * @param head1 第一个链表头节点
     * @param head2 第二个链表头节点
     * @return 合并后链表头结点
     */
    private Node merge(Node head1, Node head2){
        if(head1 == null && head2 == null){
            return null;
        }
        if(head1 == null){
            return head2;
        }
        if(head2 == null){
            return head1;
        }

        Node head;
        //取较小的值作为头结点
        if(head1.value > head2.value){
            head = head2;
            //设置head节点的next为递归结果，递归结果就是当前节点的下一个节点
            head.next = merge(head1, head2.next);
        }else {
            head = head1;
            head.next = merge(head1.next, head2);
        }
        return head;
    }
    
    private static class Node{
        private int value;
        private Node next;

        private Node(int value){
            this.value = value;
        }
    }
